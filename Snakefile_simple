from os import path, getcwd

# Run the pipeline like so:
# snakemake -pr --cores 10 --keep-going --rerun-incomplete --restart-times 3
# snakemake -s Snakefile --rulegraph |dot -Tpng > rulegraph.png
configfile: "config/config.yaml"

onsuccess:
    print("Workflow completed without any error")

onerror:
    print("An error occurred")


RULES=["Trim_adaptors", "SummarizeQC_post_adaptor_trim", "Trim_primers",
       "QC_primer_trimmed", "SummarizeQC_post_primer_trim"]

rule all:
    input:
        "03.SummarizeQC_post_adaptor_trim/multiqc_report.html",
        "05.QC/multiqc_report.html"



rule Make_logs_directories:
    output:
        directory("logs/Trim_adaptors/"),
        directory("logs/SummarizeQC_post_adaptor_trim/"),
        directory("logs/Trim_primers/"),
        directory("logs/QC_primer_trimmed/"),
        directory("logs/SummarizeQC_post_primer_trim/")
    threads: 1
    shell:
        """
         [ -d logs/ ] || mkdir -p logs/
         cd logs/
         for RULE in {RULES}; do
          [ -d ${{RULE}}/ ] || mkdir -p ${{RULE}}/
         done
        """



 #Trim adaprors and quality check using cutadapt and factqc with Trim galore
rule Trim_adaptors:
    input: 
        rules.Make_logs_directories.output,
        forward="01.raw_data/{sample}/{sample}_R1.fastq.gz",
        rev="01.raw_data/{sample}/{sample}_R2.fastq.gz"
    output:
        forward_reads="02.Trim_adaptors/{sample}/{sample}_R1.fastq.gz",
        rev_reads="02.Trim_adaptors/{sample}/{sample}_R2.fastq.gz",
        forward_html="02.Trim_adaptors/{sample}/{sample}_R1_fastqc.html",
        rev_html="02.Trim_adaptors/{sample}/{sample}_R2_fastqc.html"
    log: "logs/Trim_adaptors/{sample}/{sample}.log"
    threads: 1
    params:
        program=config['programs_path']['trim_galore'],
        out_dir=lambda w, output: path.dirname(output[0]),
        conda_activate=config['conda']['bioinfo']['env'],
        PERL5LIB=config['conda']['bioinfo']['perl5lib']
    shell:
        """ 
        set +u
        {params.conda_activate}
        {params.PERL5LIB}
        set -u

        {params.program} \
           -o {params.out_dir} \
           --fastqc  \
           --paired {input.forward} {input.rev} > {log} 2>&1

         #Rename the files
         #Fastq files
        mv {params.out_dir}/{wildcards.sample}_R1_val_1.fq.gz {params.out_dir}/{wildcards.sample}_R1.fastq.gz
        mv {params.out_dir}/{wildcards.sample}_R2_val_2.fq.gz {params.out_dir}/{wildcards.sample}_R2.fastq.gz
         #HTML files
        mv {params.out_dir}/{wildcards.sample}_R1_val_1_fastqc.html {params.out_dir}/{wildcards.sample}_R1_fastqc.html
        mv {params.out_dir}/{wildcards.sample}_R2_val_2_fastqc.html {params.out_dir}/{wildcards.sample}_R2_fastqc.html
         #Zip files
        mv {params.out_dir}/{wildcards.sample}_R1_val_1_fastqc.zip {params.out_dir}/{wildcards.sample}_R1_fastqc.zip
        mv {params.out_dir}/{wildcards.sample}_R2_val_2_fastqc.zip {params.out_dir}/{wildcards.sample}_R2_fastqc.zip
        """



# Agragage and summarize the quality check using multiqc
rule SummarizeQC_post_adaptor_trim:
    input:
        forward_html=expand("02.Trim_adaptors/{sample}/{sample}_R1_fastqc.html",
                            sample=config['samples']),
        rev_html=expand("02.Trim_adaptors/{sample}/{sample}_R2_fastqc.html",
                            sample=config['samples'])
    output: "03.SummarizeQC_post_adaptor_trim/multiqc_report.html"
    log: "logs/SummarizeQC_post_adaptor_trim/multiqc.log"
    params:
        program=config['programs_path']['multiqc'],
        in_dir=lambda w, input: path.dirname(input[0]).split("/")[0],
        out_dir=lambda w, output: path.dirname(output[0]),
        conda_activate=config['conda']['bioinfo']['env'],
        PERL5LIB=config['conda']['bioinfo']['perl5lib']
    threads: 1
    shell:
        """
        set +u
        {params.conda_activate}
        {params.PERL5LIB}
        set -u

          {params.program} \
              --interactive \
              -f {params.in_dir} \
              -o {params.out_dir}
        """

# Trim Primers
rule Trim_primers:
    input:
        rules.Make_logs_directories.output,
#        forward_reads="01.raw_data/{sample}/{sample}_R1.fastq.gz",
#        rev_reads="01.raw_data/{sample}/{sample}_R2.fastq.gz" 
        forward_reads="02.Trim_adaptors/{sample}/{sample}_R1.fastq.gz",
        rev_reads="02.Trim_adaptors/{sample}/{sample}_R2.fastq.gz"
    output:
        forward_reads="04.Trim_primers/{sample}/{sample}_R1.fastq.gz",
        rev_reads="04.Trim_primers/{sample}/{sample}_R2.fastq.gz"
    log: "logs/Trim_primers/{sample}/{sample}.log"
    params:
        program=config['programs_path']['cutadapt'],
        forward_primer=config['parameters']['cutadapt']['forward_primer'],
        rev_primer=config['parameters']['cutadapt']['reverse_primer'],
        minimum_length=config['parameters']['cutadapt']['minimum_length'],
        quality_cutoff=config['parameters']['cutadapt']['quality_cutoff'],
        conda_activate=config['conda']['bioinfo']['env'],
        PERL5LIB=config['conda']['bioinfo']['perl5lib']
    threads: 1
    shell:
        """
        set +u
        {params.conda_activate}
        {params.PERL5LIB}
        set -u

        {params.program} \
              -g '{params.forward_primer}' \
              -G '{params.rev_primer}' \
              -o {output.forward_reads} \
              -p {output.rev_reads} \
              --minimum-length  {params.minimum_length} \
              --quality-cutoff  {params.quality_cutoff} \
             {input.forward_reads} {input.rev_reads} > {log} 2>&1

        """


rule QC_primer_trimmed:
    input:
        forward="04.Trim_primers/{sample}/{sample}_R1.fastq.gz",
        rev="04.Trim_primers/{sample}/{sample}_R2.fastq.gz"
    output:
        forward_html="05.QC/{sample}/{sample}_R1_fastqc.html",
        rev_html="05.QC/{sample}/{sample}_R2_fastqc.html"
    params:
        program=config['programs_path']['fastqc'],
        out_dir=lambda w, output: path.dirname(output[0]),
        conda_activate=config['conda']['bioinfo']['env'],
        PERL5LIB=config['conda']['bioinfo']['perl5lib'],
        threads=1
    log: "logs/QC_primer_trimmed/{sample}/{sample}.log"
    threads: 1
    shell:
        """
        set +u
        {params.conda_activate}
        {params.PERL5LIB}
        set -u
          {params.program} --outdir {params.out_dir}/ \
             --threads {params.threads} \
             {input.forward} {input.rev} > {log} 2>&1
        """

rule SummarizeQC_post_primer_trim:
    input:
        forward_html=expand("05.QC/{sample}/{sample}_R1_fastqc.html",
                            sample=config['samples']),
        rev_html=expand("05.QC/{sample}/{sample}_R2_fastqc.html",
                            sample=config['samples'])
    output:
        "05.QC/multiqc_report.html"
    log: "logs/SummarizeQC_post_primer_trim/multiqc.log"
    params:
        program=config['programs_path']['multiqc'],
        out_dir=lambda w, output: path.dirname(output[0]),
        conda_activate=config['conda']['bioinfo']['env'],
        PERL5LIB=config['conda']['bioinfo']['perl5lib']
    threads: 1
    shell:
        """
        set +u
        {params.conda_activate}
        {params.PERL5LIB}
        set -u
          {params.program} \
              --interactive \
              -f {params.out_dir} \
              -o {params.out_dir} > {log} 2>&1
        """

